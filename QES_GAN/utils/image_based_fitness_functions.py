import numpy as np
import torch


def calculate_mse(sr_image, target_image):
    """
    Calculate the Mean Squared Error (MSE) between two images or batches of images.
    The function accepts both tensors and numpy arrays. If tensors, it converts them to numpy
    arrays before calculating the MSE. The function can handle both single images and batches of
    images.

    MSE between two images is calculated as the squared difference of each HR pixel to each
    corresponding SR pixel, divided by number of pixels (averaged).

    :param sr_image: numpy.ndarray or torch.Tensor. The SR image(s) generated by the ansatz.
    :param target_image: numpy.ndarray or torch.Tensor. The original HR image(s) (target).

    :returns mse: float. The Mean Squared Error.
    """
    # Convert PyTorch tensors to NumPy arrays if necessary
    if isinstance(sr_image, torch.Tensor):
        sr_image = sr_image.detach().cpu().numpy()  # TODO: should this be gpu if using GPU?
    if isinstance(target_image, torch.Tensor):
        target_image = target_image.detach().cpu().numpy()  # TODO: should this be gpu if using GPU?

    # Control for empty images
    if sr_image.size == 0 or target_image.size == 0:
        raise ValueError("One or both images are empty.")

    # Ensure the images have the same shape
    if sr_image.shape != target_image.shape:
        raise ValueError("Images must have the same dimensions.")

    # Calculate MSE
    mse = np.mean((sr_image - target_image) ** 2)

    return mse




# Example usage
if __name__ == "__main__":
    # Create dummy data for demonstration
    image1 = np.random.rand(256, 256, 3)  # NumPy array
    image2 = torch.rand(256, 256, 3)  # PyTorch tensor

    mse = calculate_mse(image1, image2)
    print(f"MSE: {mse}")
